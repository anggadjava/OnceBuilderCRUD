<?php
/*
 * Version: 1.0, 31.05.2012
 * by Adam Wysocki, goldpaid777@gmail.com
 *
 * Copyright (c) 2012 Adam Wysocki
 *
 *	This is core connector class
 *
*/

set_time_limit(60); 

// This is core of builder, many methods will be executed by ajax calling once.php with parm	
class core{
	public $pdo;
	public $data;
	public $error=0;
	public $msg;
	public $exceptions;
	public $settings;
	
	// Initialize varibles and files that cant be oversaved
	function core($_CONFIG){
		// Start up database driver
		try {
			/*

				"Many web applications will benefit from making persistent connections to database servers. 
				Persistent connections are not closed at the end of the script, but are cached and re-used when another script requests a connection using the same credentials. 
				The persistent connection cache allows you to avoid the overhead of establishing a new connection 
				every time a script needs to talk to a database, resulting in a faster web application."
					
			*/
			$this->pdo = new PDO('mysql:host='.$_CONFIG['datahost'].';dbname='.$_CONFIG['database'].'', $_CONFIG['datauser'], $_CONFIG['datapass'], array(
				PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8"
			));
			//PDO::ATTR_PERSISTENT => true, 
			$this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING );
		} catch (Exception $e) {
			die("Unable to connect: " . $e->getMessage());
		}

		/*
			switches.php is autogenerated
			core.class.php contains usefull methods and its loaded before HTML output
			editting those files may occur crash
		*/
		
		$this->exceptions=array("switches.php","core.class.php");
		
		// Start of usefull variables
		$this->data['time'] = time();

		// Global roots data
		$this->data['root_config'] = $_CONFIG;
		$this->data['root_path'] = $_SERVER["DOCUMENT_ROOT"]=='/'?'':realpath($_SERVER["DOCUMENT_ROOT"]);

		// Users data
		$this->data['user_logged'] = isset($_SESSION['user_logged']) ? $_SESSION['user_logged'] : '';
		$this->data['user_id'] = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : '';
		$this->data['user_lang'] = filter($_SESSION['user_lang']);
		$this->data['user_ip'] = $this->once_user_ip();	

		$this->data['user_username'] = $_SESSION['user_username']!=''?$_SESSION['user_username']:'Annonymus';
		
		// Project data for development mode
		if(!isset($_SESSION['project_id'])){
			if($this->data['user_id']){
				// Get selected user
				$stmt = $this->pdo->prepare("SELECT * FROM edit_projects WHERE user_id=:user_id AND `default`=1");
				$stmt->bindParam(':user_id', $this->data['user_id'], PDO::PARAM_INT);
				$stmt->execute();

				// Get count of returned records
				$user['count']=$stmt->rowCount();
				if($user['count']){
					$user['item']=$stmt->fetch(PDO::FETCH_ASSOC);
					$this->data['project_id'] = $_SESSION['project_id'] = $user['item']['id'];
				}
			}
		}else{
			$this->data['project_id'] = intval($_SESSION['project_id']);
		}
		
		// Once builder api data
		$this->data['api_key'] = 'd41d8cd98f00b204e9800998ecf8427e';
		$this->data['api_host'] = 'http://oncebuilder.com';
		
		// Builder settings
		$this->settings['perm_delete'] = true;
	}
	// Set data function
	function set_data($t){
		/*
			Set data function
			Example:
			$this->set_data(array(
				"project_name" => filter($_GET['name'])
			));
			
			OR 
			$this->set_data(array(
				"project_name" => filter($_GET['name'])
			));
		*/
		/*$tab=array(
		"terms" => odbierz($_POST[rules]),
		"login" => odbierz($_POST[username]),
		"password" => odbierz($_POST[password]),
		"password2" => odbierz($_POST[check]),
		"email" => odbierz($_POST[email])
		)*/
		/*
		$tab=array(
		"code" => odbierz($_POST['code']),
		"logged" => $_SESSION ['zalogowany']
		);
		*/
		foreach($t as $key => $value){
			$this->data[$key]=$value;
		}
	}
	function get_data($t){
		return $this->data[$t];
	}
	// Get the user IP address
	function once_user_ip() {
		$_SERVER['HTTP_CLIENT_IP'] = isset($_SERVER['HTTP_CLIENT_IP']) ? $_SERVER['HTTP_CLIENT_IP'] : '';
		$_SERVER['HTTP_X_FORWARDED_FOR'] = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : '';
		$_SERVER['HTTP_X_FORWARDED'] = isset($_SERVER['HTTP_X_FORWARDED']) ? $_SERVER['HTTP_X_FORWARDED'] : '';
		$_SERVER['HTTP_FORWARDED_FOR'] = isset($_SERVER['HTTP_FORWARDED_FOR']) ? $_SERVER['HTTP_FORWARDED_FOR'] : '';
		$_SERVER['HTTP_FORWARDED'] = isset($_SERVER['HTTP_FORWARDED']) ? $_SERVER['HTTP_FORWARDED'] : '';
		$_SERVER['REMOTE_ADDR'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';

		if($_SERVER['HTTP_CLIENT_IP']){
			$user_ip = $_SERVER['HTTP_CLIENT_IP'];
		}else if($_SERVER['HTTP_X_FORWARDED_FOR']){
			$user_ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		}else if($_SERVER['HTTP_X_FORWARDED']){
			$user_ip = $_SERVER['HTTP_X_FORWARDED'];
		}else if($_SERVER['HTTP_FORWARDED_FOR']){
			$user_ip = $_SERVER['HTTP_FORWARDED_FOR'];
		}else if($_SERVER['HTTP_FORWARDED']){
			$user_ip = $_SERVER['HTTP_FORWARDED'];
		}else if($_SERVER['REMOTE_ADDR']){
			$user_ip = $_SERVER['REMOTE_ADDR'];
		}else{
			$user_ip = 'UNKNOWN';
		}
		
		return $user_ip;
	}
	############################ CSRF PROTECTION ##################################################
	// Creating csrf_token
	function once_csrf_token(){
		// Generate token && return
		$_SESSION['csrf_token'] = md5($this->data['api_key'].''.$this->data['time']);

		return $_SESSION['csrf_token'];
	}
	// Checking csrf_token
	function once_csrf_token_check($token){
		if($token==$_SESSION['csrf_token']){
			return true;
		}else{
			return false;
		}
	}
	############################ PERMISSION PROTECTION ##################################################
	// Checking permissions
	function once_permission_check(){
		if($_SESSION['user_type_id']==1 || $_SESSION['user_type_id']==2){
			return true;
		}else{
			return false;
		}
	}
	############################ ONCE FUNCTIONS ##################################################
	// Get once item
	function once_select_item($table,$type=''){
		// Check statements type
		if($type=='project_id'){
			$sql="AND project_id=".$this->data['project_id']."";
		}else if($type=='user_id'){
			$sql="AND user_id=".$this->data['user_id']."";
		}else if($type=='all' || $type=='both'){
			$sql="AND project_id=".$this->data['project_id']." AND user_id=".$this->data['user_id']."";
		}else{
			$sql='';
		}
		
		// Get selected data
		$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table." WHERE id=:id ".$sql." ORDER by id ASC");
		$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
		$stmt->execute();
		
		// Get count of returned records
		$once['count']=$stmt->rowCount();
		if($once['count']){
			$once['item']=$stmt->fetch(PDO::FETCH_ASSOC);
		}

		// Return once
		return $once;
	}
	// Get all records (used for small results)
	function once_select_items($table,$type=''){
		// Check statements type
		if($type=='project_id'){
			$sql="WHERE project_id=".$this->data['project_id']."";
		}else if($type=='user_id'){
			$sql="WHERE user_id=".$this->data['user_id']."";
		}else if($type=='all' || $type=='both'){
			$sql="WHERE project_id=".$this->data['project_id']." AND user_id=".$this->data['user_id']."";
		}else{
			$sql='';
		}
		
		// Get selected data
		$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table." ".$sql." ORDER by id ASC");
		$stmt->execute();
		
		// Get count of returned records
		$once['count']=$stmt->rowCount();
		if($once['count']){
			// Return result in table
			foreach ($stmt->fetchAll(PDO::FETCH_ASSOC) as $row) {
				$once['items'][]=$row;
			}
		}
		
		// Return once
		return $once;
	}
	// Get records resources with range and display limit
	function once_select_items_page($table,$type=''){
		# XAMPP fix without turning error info off -------------------
		$sql='';
		
		// Start condition if any statements
		if($type!='' || $this->data['type_id']!=0 || $this->data['category_id']!=0 || $this->data['ids']!='' || $this->data['query']!='' || $this->data['where']!=''){
			$sql.="WHERE ";
		}

		// Check statements type
		if($type=='project_id'){
			$sql.="project_id=".$this->data['project_id']." ";
		}else if($type=='user_id'){
			$sql.="user_id=".$this->data['user_id']." ";
		}else if($type=='all'){
			$sql.="project_id=".$this->data['project_id']." AND user_id=".$this->data['user_id']." ";
		}

		// Check for more statements
		if($type=='project_id' || $type=='user_id' || $type=='all'){
			if($this->data['type_id']!=0 || $this->data['category_id']!=0 || $this->data['ids'] || $this->data['query']!='' || $this->data['where']!=''){
				$sql.=" AND";
			}
		}

		// Check type_id statement
		if($this->data['type_id']!=0){
			$sql.=" type_id='".$this->data['type_id']."'";
			// Check for more statements
			if($this->data['category_id']!=0 || $this->data['ids'] || $this->data['query']!='' || $this->data['where']!=''){
				$sql.=" AND";
			}
		}
		
		// Check category_id statement
		if($this->data['category_id']!=0){
			$sql.=" category_id='".$this->data['category_id']."'";
			// Check for more statements
			if($this->data['query']!='' || $this->data['ids'] || $this->data['where']!=''){
				$sql.=" AND";
			}
		}

		// Check categories statement
		if(strlen($this->data['ids'])>0){
			$sql.=" category_id IN (".implode(",",$this->data['ids']).")";
			// Check for more statements
			if($this->data['query']!='' || $this->data['where']!=''){
				$sql.=" AND";
			}
		}
		
		// Check query statement
		if($this->data['query']!=''){
			$sq='(';
			$binds = array();
			foreach($this->data['query_in'] as $k => $v){
				$sq.=''.$v.' LIKE :'.$v.' OR ';
				$binds[]=$v;
			}
			$sq=substr($sq,0, -3);
			$sq.=')';
			$sql.=$sq;
			// Check for more statements
			if($this->data['where']!=''){
				$sql.=" AND";
			}
		}
		
		// Check where statement
		if($this->data['where']!=''){
			$sql.=" ".$this->data['where']." ";
		}
		
		// Prepare query to get count of items with conditions
		$stmt = $this->pdo->prepare("SELECT COUNT(id) AS ile FROM edit_".$table." ".$sql);
		if($this->data['query']!=''){
			$this->data['query']='%'.$this->data['query'].'%';
			// Loop to bind specified params
			foreach($binds as $k => $v){
				$stmt->bindParam(':'.$binds[$k].'', $this->data['query'], PDO::PARAM_STR, 50);
			}
		}
		
		$stmt->execute();
		$row=$stmt->fetch(PDO::FETCH_ASSOC);
		
		if($this->data['page']<=0){
			$this->data['page']=1;
		}

		// Results on page
		if(isset($_SESSION[$table])){
			if(in_array($_SESSION[$table]['results'],array(10,20,50,100))){
				$limit=$_SESSION[$table]['results'];
			}else{
				$limit=10;
			}
		}else{
			$limit=10;
		}

		$limitfrom=intval($this->data['page']*$limit)-$limit;
		$limitto=$limit;
		
		$once['limit']=$limit;
		$once['page']=$this->data['page'];
		$once['pages']=ceil($row['ile']/$limit);
		
		// Sort by
		if($this->data['sort_by']!=''){
			$order_by='ORDER by '.$this->data['sort_by'].'';
		}else{
			$order_by='ORDER by id DESC';
		}
		
		// Get list of items with conditions
		$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table." ".$sql." ".$order_by." LIMIT ".$limitfrom.",".$limitto."");
		if($this->data['query']!=''){
			// Loop to bind specified params
			foreach($binds as $k => $v){
				$stmt->bindParam(':'.$binds[$k].'', $this->data['query'], PDO::PARAM_STR, 50);
			}
		}
		$stmt->execute();
		
		// Get count of returned records
		$once['count']=$stmt->rowCount();
		if($once['count']){
			// Return result in table
			foreach ($stmt->fetchAll(PDO::FETCH_ASSOC) as $row) {
				$once['items'][]=$row;
			}
		}
		
		return $once;
		
	}
	// Delete once item by id
	function once_delete_item($table,$type=''){
		// Check statements type
		if($type=='project_id'){
			$sql="AND project_id=".$this->data['project_id']."";
		}else if($type=='user_id'){
			$sql="AND user_id=".$this->data['user_id']."";
		}else if($type=='all'){
			$sql="AND project_id=".$this->data['project_id']." AND user_id=".$this->data['user_id']."";
		}else{
			$sql='';
		}

		// Get selected data
		$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table." WHERE id=:id ".$sql." LIMIT 1");
		$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
		$stmt->execute();

		$once['result'] = $stmt->rowCount();

		// Check if item exist
		if($once['result']){
			// Delete selected item
			$stmt = $this->pdo->prepare("DELETE FROM edit_".$table." WHERE id=:id LIMIT 1");
			$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
			$stmt->execute();
			
			$once['result']=$stmt->rowCount();
			
			// Return status if item deleted
			if($once['result']){
				// Set status ok
				$once['status']='ok';
			}else{
				// Return error if item not deleted
				$once['errors'][]='can\'t delete item from: '.$table.' ';
				$once['error']++;
			}
		}else{
			// Return error if item not deleted
			$once['error']='item doesn\'t exist in: '.$table.' ';
		}
		
		// Return once
		return $once;
	}
	// Set page limit
	function once_page_limit($module){
		$_SESSION[$module]['results']=$this->data['limit'];
	}
	############################ ONCE TABLE TYPES ##################################################
	// Get type data
	function type_get($table){
		// Prepare varibles
		$once['error']=0;
		
		// Get selected data
		$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table."_types ORDER by position");
		$stmt->bindParam(':project_id', $this->data['project_id'], PDO::PARAM_INT);
		$stmt->execute();

		// Check if item exist
		$once['result']=$stmt->rowCount();
		if($once['result']){
			// fetch result as table
			foreach ($stmt->fetchAll(PDO::FETCH_ASSOC) as $row) {
				$once['items'][]=$row;
			}
			$once['status']='ok';
		}else{
			$once['errors'][]=''.$table.' type - not exists';
			$once['error']++;
		}
		return $once;
	}
	// Create new type
	function type_new($table){
		if($this->once_permission_check()){
			if($this->once_csrf_token_check($this->data['csrf_token'])){
				// Get selected user
				$stmt = $this->pdo->prepare("SELECT * FROM edit_users WHERE id=:id ORDER by id ASC");
				$stmt->bindParam(':id', $this->data['user_id'], PDO::PARAM_INT);
				$stmt->execute();
				
				// Get count of returned records
				$user['count']=$stmt->rowCount();
				if($user['count']){
					$user['item']=$stmt->fetch(PDO::FETCH_ASSOC);
					
					// Check if user is creator or admin
					if($user['item']['type_id']==1 || $user['item']['type_id']==2){

						// Insert new type
						$stmt2 = $this->pdo->prepare("SELECT MAX(position) AS ile FROM edit_".$table."_types WHERE project_id=:project_id LIMIT 1");
						$stmt2->bindParam(':project_id', $this->data['project_id'], PDO::PARAM_INT);
						$stmt2->execute();
						
						// Check if item exist
						$once['result']=$stmt2->rowCount();
						if($once['result']){
							// Fetch result as table
							$wierszx=$stmt2->fetch(PDO::FETCH_ASSOC);
							$this->data['position']=intval($wierszx['ile'])+1;
							$this->data['name']='New type';

							// Insert new record
							$stmt = $this->pdo->prepare("
								INSERT INTO edit_".$table."_types (id, project_id, name, position) 
								VALUES ('', :project_id, :name, :position)
							");
							$stmt->bindParam(':project_id', $this->data['project_id'], PDO::PARAM_INT);
							$stmt->bindParam(':name', $this->data['name'], PDO::PARAM_STR, 255);
							$stmt->bindParam(':position', $this->data['position'], PDO::PARAM_INT);
							$stmt->execute();
							
							$once['result'] = $stmt->rowCount();
							
							// Return data & status if item created
							if($once['result']){
								// Get created data
								$once['item']=array(
									"id" => $this->pdo->lastInsertId(),
									"name" => $this->data['name']
								);

								// Set status ok
								$once['status']='ok';
							}else{
								// Return error if item not created
								$once['errors'][]='can\'t insert item to: '.$table.' ';
								$once['error']++;
							}
						}else{
							$once['errors'][]=''.$table.' type - not exists';
							$once['error']++;
						}
					}else{
						$once['errors'][]='you don\'t have permission';
						$once['error']++;
					}
				}
			}
		}
		echo json_encode($once);
	}
	// Delete type by id
	function type_delete($table){
		if($this->once_permission_check()){
			if($this->once_csrf_token_check($this->data['csrf_token'])){
				// Prepare statements to get selected user
				$stmt = $this->pdo->prepare("SELECT * FROM edit_users WHERE id=:id ORDER by id ASC");
				$stmt->bindParam(':id', $this->data['user_id'], PDO::PARAM_INT);
				$stmt->execute();

				// Get count of returned records
				$user['count']=$stmt->rowCount();
				if($user['count']){
					$user['item']=$stmt->fetch(PDO::FETCH_ASSOC);
					
					// Check if user is creator or admin
					if($user['item']['type_id']==1 || $user['item']['type_id']==2){
						// Get selected data
						$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table."_types WHERE id=:id LIMIT 1");
						$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
						$stmt->execute();

						$once['result'] = $stmt->rowCount();

						// Check if item exist
						if($once['result']){
							// Prepare statements to delete selected item
							$stmt = $this->pdo->prepare("DELETE FROM edit_".$table."_types WHERE id=:id LIMIT 1");
							$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
							$stmt->execute();

							$once['result'] = $stmt->rowCount();

							// Check if item exist
							if($once['result']){
								$once['status']='ok';
							}
						}else{
							$once['errors'][]=''.$table.' type - not exists';
							$once['error']++;
						}
					}else{
						$once['errors'][]='you don\'t have permission';
						$once['error']++;
					}
				}
			}
		}
		echo json_encode($once);
	}
	// Edit type by id
	function type_edit($table){
		if($this->once_permission_check()){
			if($this->once_csrf_token_check($this->data['csrf_token'])){
				// Prepare statements to get selected user
				$stmt = $this->pdo->prepare("SELECT * FROM edit_users WHERE id=:id ORDER by id ASC");
				$stmt->bindParam(':id', $this->data['user_id'], PDO::PARAM_INT);
				$stmt->execute();
				
				// Get count of returned records
				$user['count']=$stmt->rowCount();
				if($user['count']){
					$user['item']=$stmt->fetch(PDO::FETCH_ASSOC);
					
					// Check if user is creator or admin
					if($user['item']['type_id']==1 || $user['item']['type_id']==2){
						// Get selected data
						$stmt = $this->pdo->prepare("SELECT * FROM edit_".$table."_types WHERE id=:id LIMIT 1");
						$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
						$stmt->execute();

						$once['result'] = $stmt->rowCount();

						// Check if item exist
						if($once['result']){
							// Prepare statements to delete selected item
							$stmt = $this->pdo->prepare("UPDATE edit_".$table."_types SET name=:name, ico=:ico WHERE id=:id LIMIT 1");
							$stmt->bindParam(':id', $this->data['id'], PDO::PARAM_INT);
							$stmt->bindParam(':name', $this->data['name'], PDO::PARAM_STR, 50);
							$stmt->bindParam(':ico', $this->data['ico'], PDO::PARAM_STR, 50);
							$stmt->execute();

							$once['result'] = $stmt->rowCount();

							// Check if item exist
							if($once['result']){
								$once['item']=array(
									"id" => $this->data['id'],
									"name" => $this->data['name']
								);
								$once['status']='ok';
							}
						}else{
							$once['errors'][]=''.$table.' type - not exists';
							$once['error']++;
						}
					}else{
						$once['errors'][]='you don\'t have permission';
						$once['error']++;
					}
				}
			}
		}
		
		echo json_encode($once);
	}
	// Sort type
	function type_sort($table){
		if($this->once_permission_check()){
			if($this->once_csrf_token_check($this->data['csrf_token'])){
				// Prepare statements to update selected type
				$stmt = $this->pdo->prepare("UPDATE edit_".$table."_types SET position=:position WHERE id=:id");
				foreach ($this->data['type'] as $position => $item){
					$stmt->bindParam(':position', $position, PDO::PARAM_INT);
					$stmt->bindParam(':id', $item, PDO::PARAM_INT);
					$stmt->execute();
				}
				$once['status']='ok';
			}
		}
		echo json_encode($once);
	}
	############################ ONCE IMAGE HELPERS ##################################################
	// Resize image with given with/height
	function once_image_resize($file,$width_new=320,$height_new=240){
		$fileinfo=getimagesize($file);

		// Getting width/height
		$width_orig=$fileinfo[0];
		$height_orig=$fileinfo[1];

		// Resample
		$resized_image = imagecreatetruecolor($width_new, $height_new);

		switch ($fileinfo[2]){
			case IMAGETYPE_GIF:
				$image = imagecreatefromgif($file);
			break;
			case IMAGETYPE_JPEG:
			$image = imagecreatefromjpeg($file);
				break;
			case IMAGETYPE_PNG:
				$image = imagecreatefrompng($file);
			break;
			default:
			return false;
		}

		imagecopyresampled($resized_image, $image, 0, 0, 0, 0, $width_new, $height_new, $width_orig, $height_orig);
		imagejpeg($resized_image, $file, 100);

		imagedestroy($image);
		imagedestroy($resized_image);
	}
}
?>